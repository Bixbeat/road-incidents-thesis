#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 19 11:04:33 2018

@author: alex
"""

import requests
import time
from os import path

from utils import APICaller

class FlickrCaller(APICaller):
    def __init__(self, source, rest_url, api_key, data_root, returns_per_req):
        super().__init__(source, rest_url, api_key, data_root, returns_per_req)    
    def download_tagged_images(self, tags, page, search_grouping):
        offset = self._assert_offset(page, self.returns_per_req)
        response = self.search_images(tags, page)
        photos = response.json()['photos']['photo']

        out_dir = self._construct_output_dir(search_grouping, tags)
        self._create_dir_if_not_exist(out_dir)     

        response_pickle = out_dir + f'/{tags}_{offset}.pickle'
        self._store_response(response, response_pickle)

        for i,_ in enumerate(photos):
            image_id = photos[i]['id']
            sizes_response  = self.get_image_sizes(image_id)
            img_sizes = sizes_response.json()['sizes']
        
            if not img_sizes['candownload'] == 0:
                highest_res_img = self._get_highest_resolution_img(img_sizes)               

                image_path = out_dir + f'/{image_id}.png'
                try: self._save_image_file(highest_res_img, image_path)
                except: print(f"Unsaveable image: {highest_res_img['contentUrl']}")
                            
            time.sleep(0.2) # Restricting API call frequency to be a good citizen

    def search_images(self, tags, page=1):
        search_url = self._create_method_url('flickr.photos.search')
        params = {  'tags':tags,
                    'tag_mode':'all',
                    'page':str(page),
                    'media':'photos',
                    'format':'json',
                    'nojsoncallback':1,
                }
        
        response = requests.get(search_url, params = params)
        return response

    def get_image_sizes(self, image_id):
        size_url = self._create_method_url('flickr.photos.getSizes')
        params = {  'photo_id':image_id,
                    'format':'json',
                    'nojsoncallback':1
                }        
        response = requests.get(size_url, params = params)
        return response        

    def _get_highest_resolution_img(self, img_sizes):
        # There has got to be a better way to find the highest resolution..
        highest_res_node = [i for i,_ in enumerate(img_sizes['size'])][-1]
        highest_res = img_sizes['size'][highest_res_node]['source']
        image_bytes = requests.get(highest_res, stream=True)
        return(image_bytes)

    def _create_method_url(self, method):
        return f"{self.rest_url}method={method}&api_key={self.key}"

if __name__ == '__main__':
    DATA_ROOT = '/home/alex/Documents/Scripts/road-incidents-thesis/data/'
    API_KEY = u''
    FLICKR_API_URL = 'https://api.flickr.com/services/rest/?'

    search_grouping = "snowy_road"
    page = 0
    
    searcher = FlickrCaller(  source='flickr',
                                rest_url = FLICKR_API_URL,
                                api_key = API_KEY,
                                data_root = DATA_ROOT,
                                returns_per_req = 100)

    searcher.download_tagged_images(tags = 'snow+road', search_grouping = search_grouping, page = page)